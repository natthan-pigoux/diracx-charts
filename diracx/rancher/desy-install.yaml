global:
  storageClassName: longhorn
  # images:
  #   tag: "dev"
  #   # TODO: We should use the base images here but pythonModulesToInstall would need to be split
  #   services: ghcr.io/diracgrid/diracx/services
  #   client: ghcr.io/diracgrid/diracx/client

diracx:
  #hostname: rancher-cta-dev.zeuthen.desy.de
  hostname: diracx-cert.app.zeuthen.desy.de
  service:
    port: 8000
  settings:
    DIRACX_SERVICE_AUTH_ALLOWED_REDIRECTS: '["https://diracx-cert.app.zeuthen.desy.de/api/docs/oauth2-redirect","https://diracx-cert.app.zeuthen.desy.de/#authentication-callback"]'
    DIRACX_SANDBOX_STORE_BUCKET_NAME: demo-sandboxes
    DIRACX_SANDBOX_STORE_S3_CLIENT_KWARGS: '{"endpoint_url": "http://diracx-minio:9000", "aws_access_key_id": "console", "aws_secret_access_key": "console123"}'
    DIRACX_SANDBOX_STORE_AUTO_CREATE_BUCKET: "true"
    DIRACX_OTEL_ENABLED: "{{ open_telemetry }}"
    DIRACX_OTEL_GRPC_ENDPOINT: "diracx-demo-opentelemetry-collector:4317"
    DIRACX_OTEL_GRPC_INSECURE: "true"
    DIRACX_CONFIG_BACKEND_URL: "git+https://gitlab.cta-observatory.org/natthan.pigoux/cs_store.git"
    #DIRACX_CONFIG_BACKEND_URL: "git+https://gitlab.cta-observatory.org/cta-computing/dpps/workload/wms-configuration.git"
    #DIRACX_SERVICE_AUTH_TOKEN_KEY: "file:///signing-key/rsa256.key"
  sqlDbs:
    default:
      rootUser: root
      rootPassword: rRb9nsprhJsCAQx
      user: Dirac
      password: ctadirac
      host: majestix-vm1.zeuthen.desy.de:3306
    dbs:
      AuthDB:
      JobDB:
      JobLoggingDB:
      SandboxMetadataDB:
      TaskQueueDB:
  osDbs:
    dbs:
      JobParametersDB:
  # pythonModulesToInstall:
  #   - "git+https://github.com/USERNAME/diracx.git@BRANCH_NAME#egg=diracx_core&subdirectory=diracx-core"
  #   - "git+https://github.com/USERNAME/diracx.git@BRANCH_NAME#egg=diracx_db&subdirectory=diracx-db"
  #   - "git+https://github.com/USERNAME/diracx.git@BRANCH_NAME#egg=diracx_routers&subdirectory=diracx-routers"

ingress:
  enabled: true
  className: "traefik"
  tlsSecretName: myingress-cert
  annotations: {}

developer:
  enabled: false

cert-manager:
  enabled: false

initSql:
  # Should DiracX include an init container which manages the SQL DB schema?
  enabled: False
  env: {}

mysql:
  enabled: false
  startupProbe:
    enabled: true
    initialDelaySeconds: 15
    periodSeconds: 10
    timeoutSeconds: 1
    failureThreshold: 30
    successThreshold: 1
dex:
  config:
    issuer: http://diracx-cert.app.zeuthen.desy.de:32002

    staticClients:
    - id: d396912e-2f04-439b-8ae7-d8c585a34790
      public: true
      name: 'CLI app'
      redirectURIs:
        - 'https://diracx-cert.app.zeuthen.desy.de/api/auth/device/complete'
        - 'https://diracx-cert.app.zeuthen.desy.de/api/auth/authorize/complete'

    staticPasswords:
      - email: "admin@example.com"
        hash: "$2a$10$2b2cU8CPhOTaGrs1HRQuAueS7JTT5ZHsHSzYiFPm1leZck7Mc8T4W"
        username: "admin"
