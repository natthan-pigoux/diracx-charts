global:
  storageClassName: longhorn

diracx:
  hostname: diracx-cert.cta-test.zeuthen.desy.de # test-cluster dns zone is cta-test.zeuthen.desy.de
  settings:
    DIRACX_SERVICE_AUTH_ALLOWED_REDIRECTS: '["https://diracx-cert.cta-test.zeuthen.desy.de/api/docs/oauth2-redirect","https://diracx-cert.cta-test.zeuthen.desy.de/#authentication-callback"]'
    DIRACX_SANDBOX_STORE_BUCKET_NAME: demo-sandboxes
    DIRACX_SANDBOX_STORE_S3_CLIENT_KWARGS: '{"endpoint_url": "http://diracx-cert.cta-test.zeuthen.desy.de:32000", "aws_access_key_id": "console", "aws_secret_access_key": "console123"}'
    DIRACX_SANDBOX_STORE_AUTO_CREATE_BUCKET: "true"
    DIRACX_CONFIG_BACKEND_URL: "git+https://gitlab.cta-observatory.org/natthan.pigoux/cs_store.git" # specific branch name with @main
    #DIRACX_CONFIG_BACKEND_URL: "git+https://gitlab.cta-observatory.org/cta-computing/dpps/workload/wms-configuration.git"
    DIRACX_SERVICE_AUTH_TOKEN_ISSUER: https://diracx-cert.cta-test.zeuthen.desy.de

  # use Majestix DBs
  sqlDbs:
    default:
      # need to put this into a secret
      rootUser: root
      rootPassword: rRb9nsprhJsCAQx
      user: Dirac
      password: ctadirac
      host: majestix-vm1.zeuthen.desy.de:3306
    dbs:
      AuthDB:
        internalName: DiracXAuthDB
      JobDB:
      JobLoggingDB:
      SandboxMetadataDB:
      TaskQueueDB:
  osDbs:
    dbs:
      JobParametersDB:

minio:
  environment:
    MINIO_BROWSER_REDIRECT_URL: http://diracx-cert.cta-test.zeuthen.desy.de:32001/

ingress:
  enabled: true
  className: "nginx" # Use the installed nginx ingress controller instead of traefik
  tlsSecretName: myingress-cert
  hosts:
  annotations:
    # # Specific hostname used for external access
    external-dns.alpha.kubernetes.io/hostname: diracx-cert.cta-test.zeuthen.desy.de
    external-dns.alpha.kubernetes.io/target: 141.34.51.79
  # # Specific IP used for external access
  loadBalancerIP: 141.34.51.79

developer:
  enabled: false

# Disable cert-manager since it already exists in the cluster
cert-manager:
  enabled: false

initSql:
  # Should DiracX include an init container which manages the SQL DB schema?
  # Since we use the Majestix DBs, we don't need this
  enabled: False
  env: {}

# To fix rabbitmq background startup issue
rabbitmq:
  podSecurityContext:
    enabled: true
  containerSecurityContext:
    enabled: true

# enable mysql since we use Majestix DBs
mysql:
  enabled: false
  startupProbe:
    enabled: true
    initialDelaySeconds: 15
    periodSeconds: 10
    timeoutSeconds: 1
    failureThreshold: 30
    successThreshold: 1 

dex:
  config:
    issuer: https://diracx-cert.cta-test.zeuthen.desy.de:32002

    staticClients:
      - id: 849a153b-74e8-46ab-8c60-b30da25a36fb
        public: true
        name: 'ctao-wms-auth'
        redirectURIs:
          - 'https://diracx-cert.cta-test.zeuthen.desy.de/api/auth/device/complete'
          - 'https://diracx-cert.cta-test.zeuthen.desy.de/api/auth/authorize/complete'

    staticPasswords:
      - email: "admin@example.com"
        hash: "$2a$10$2b2cU8CPhOTaGrs1HRQuAueS7JTT5ZHsHSzYiFPm1leZck7Mc8T4W"
        username: "admin"
